{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li> npc_io<ul> <li> file_io</li> </ul> </li> </ul>"},{"location":"reference/npc_io/","title":"Index","text":""},{"location":"reference/npc_io/#npc_io","title":"npc_io","text":"<p>npc_io</p> <p>File IO tools for MindScope Neuropixels projects in the cloud. :author: Ben Hardcastle ben.hardcastle@alleninstitue.org :license: MIT</p>"},{"location":"reference/npc_io/#npc_io.load_dotenv","title":"load_dotenv","text":"<pre><code>load_dotenv() -&gt; None\n</code></pre> <p>Load environment variables from .env file in current working directory.</p> <p>load_dotenv()</p> Source code in <code>npc_io/__init__.py</code> <pre><code>def load_dotenv() -&gt; None:\n    \"\"\"\n    Load environment variables from .env file in current working directory.\n\n    &gt;&gt;&gt; load_dotenv()\n    \"\"\"\n    is_dotenv_used = dotenv.load_dotenv(dotenv.find_dotenv(usecwd=True))\n    logger.debug(f\"environment variables loaded from dotenv file: {is_dotenv_used}\")\n</code></pre>"},{"location":"reference/npc_io/#npc_io.testmod","title":"testmod","text":"<pre><code>testmod(**testmod_kwargs) -&gt; TestResults\n</code></pre> <p>Run doctests for the module, configured to ignore exception details and normalize whitespace.</p> <p>Accepts kwargs to pass to doctest.testmod().</p> <p>Add to modules to run doctests when run as a script: .. code-block:: text     if name == \"main\":         from npc_io import testmod         testmod()</p> Source code in <code>npc_io/__init__.py</code> <pre><code>def testmod(**testmod_kwargs) -&gt; doctest.TestResults:\n    \"\"\"\n    Run doctests for the module, configured to ignore exception details and\n    normalize whitespace.\n\n    Accepts kwargs to pass to doctest.testmod().\n\n    Add to modules to run doctests when run as a script:\n    .. code-block:: text\n        if __name__ == \"__main__\":\n            from npc_io import testmod\n            testmod()\n    \"\"\"\n    _ = testmod_kwargs.setdefault(\n        \"optionflags\", doctest.NORMALIZE_WHITESPACE | doctest.ELLIPSIS\n    )\n    return doctest.testmod(**testmod_kwargs)\n</code></pre>"},{"location":"reference/npc_io/file_io/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> file_io","text":""},{"location":"reference/npc_io/file_io/#npc_io.file_io","title":"file_io","text":"<p>Tools for working with Open Ephys raw data files.</p>"},{"location":"reference/npc_io/file_io/#npc_io.file_io.cached_property","title":"cached_property","text":"<pre><code>cached_property(func: Callable[[Any], _T])\n</code></pre> <p>             Bases: <code>cached_property</code>, <code>Generic[_T]</code></p> <p>Copy of stlib functools.cached_property minus faulty thread lock.</p> <p>Issue described here: https://github.com/python/cpython/issues/87634</p> <p>This version will make concurrent tasks across multiple instances faster, but each instance's cached properties will no longer be thread-safe - ie. don't dispatch the same instance to multiple threads without implementing your own lock.</p> Source code in <code>npc_io/file_io.py</code> <pre><code>def __init__(self, func: Callable[[Any], _T]) -&gt; None:\n    super().__init__(func)\n</code></pre>"},{"location":"reference/npc_io/file_io/#npc_io.file_io.copy","title":"copy","text":"<pre><code>copy(src: PathLike, dest: PathLike, max_attempts: int = 2) -&gt; None\n</code></pre> <p>Copy <code>src</code> to <code>dest</code> with checksum validation.</p> <ul> <li>copies recursively if <code>src</code> is a directory</li> <li>if dest already exists, checksums are compared, copying is skipped if they match</li> <li>attempts to copy up to 3 times if checksums don't match</li> <li>replaces existing symlinks with actual files</li> <li>creates parent dirs if needed</li> </ul> Source code in <code>npc_io/file_io.py</code> <pre><code>def copy(src: PathLike, dest: PathLike, max_attempts: int = 2) -&gt; None:\n    \"\"\"Copy `src` to `dest` with checksum validation.\n\n    - copies recursively if `src` is a directory\n    - if dest already exists, checksums are compared, copying is skipped if they match\n    - attempts to copy up to 3 times if checksums don't match\n    - replaces existing symlinks with actual files\n    - creates parent dirs if needed\n    \"\"\"\n    src, dest = from_pathlike(src), from_pathlike(dest)\n\n    if dest.exists() and dest.is_symlink():\n        dest.unlink()  # we'll replace symlink with src file\n\n    if src.is_dir():  # copy files recursively\n        for path in src.iterdir():\n            copy(path, dest / path.name)\n        return\n\n    if (\n        not dest.suffix\n    ):  # dest is a folder, but might not exist yet so can't use `is_dir`\n        dest = dest / src.name\n    dest.parent.mkdir(parents=True, exist_ok=True)\n\n    if not dest.exists():\n        shutil.copy2(src, dest)\n        logger.debug(f\"Copied {src} to {dest}\")\n\n    for _ in range(max_attempts):\n        if checksums_match(src, dest):\n            break\n        shutil.copy2(src, dest)\n    else:\n        raise OSError(\n            f\"Failed to copy {src} to {dest} with checksum-validation after {max_attempts} attempts\"\n        )\n    logger.debug(f\"Copy of {src} at {dest} validated with checksum\")\n</code></pre>"},{"location":"reference/npc_io/file_io/#npc_io.file_io.dir_size","title":"dir_size","text":"<pre><code>dir_size(path: PathLike) -&gt; int\n</code></pre> <p>Return the size of a directory in bytes</p> Source code in <code>npc_io/file_io.py</code> <pre><code>def dir_size(path: PathLike) -&gt; int:\n    \"\"\"Return the size of a directory in bytes\"\"\"\n    path = from_pathlike(path)\n    if not path.is_dir():\n        raise ValueError(f\"{path} is not a directory\")\n    dir_size = 0\n    dir_size += sum(file_size(f) for f in path.rglob(\"*\") if f.is_file())\n    return dir_size\n</code></pre>"},{"location":"reference/npc_io/file_io/#npc_io.file_io.dir_size_gb","title":"dir_size_gb","text":"<pre><code>dir_size_gb(path: PathLike) -&gt; float\n</code></pre> <p>Return the size of a directory in GB</p> Source code in <code>npc_io/file_io.py</code> <pre><code>def dir_size_gb(path: PathLike) -&gt; float:\n    \"\"\"Return the size of a directory in GB\"\"\"\n    return round(dir_size(path) / 1024**3, 1)\n</code></pre>"},{"location":"reference/npc_io/file_io/#npc_io.file_io.free_gb","title":"free_gb","text":"<pre><code>free_gb(path: PathLike) -&gt; float\n</code></pre> <p>Return free space at <code>path</code>, to .1 GB. Raises FileNotFoundError if <code>path</code> not accessible.</p> Source code in <code>npc_io/file_io.py</code> <pre><code>def free_gb(path: PathLike) -&gt; float:\n    \"Return free space at `path`, to .1 GB. Raises FileNotFoundError if `path` not accessible.\"\n    path = from_pathlike(path)\n    return round(shutil.disk_usage(path).free / 1024**3, 1)\n</code></pre>"},{"location":"reference/npc_io/file_io/#npc_io.file_io.from_pathlike","title":"from_pathlike","text":"<pre><code>from_pathlike(pathlike: PathLike) -&gt; UPath\n</code></pre> <p>from_pathlike('s3://aind-data-bucket/experiment2_Record Node 102#probeA.png') S3Path('s3://aind-data-bucket/experiment2_Record Node 102#probeA.png')</p> <p>from_pathlike('s3://codeocean-s3datasetsbucket-1u41qdg42ur9/4797cab2-9ea2-4747-8d15-5ba064837c1c/postprocessed/experiment1_Record Node 102#Neuropix-PXI-100.ProbeA-AP_recording1/template_metrics/params.json') S3Path('s3://codeocean-s3datasetsbucket-1u41qdg42ur9/4797cab2-9ea2-4747-8d15-5ba064837c1c/postprocessed/experiment1_Record Node 102#Neuropix-PXI-100.ProbeA-AP_recording1/template_metrics/params.json')</p> Source code in <code>npc_io/file_io.py</code> <pre><code>def from_pathlike(pathlike: PathLike) -&gt; upath.UPath:\n    \"\"\"\n    &gt;&gt;&gt; from_pathlike('s3://aind-data-bucket/experiment2_Record Node 102#probeA.png')\n    S3Path('s3://aind-data-bucket/experiment2_Record Node 102#probeA.png')\n\n    &gt;&gt;&gt; from_pathlike('s3://codeocean-s3datasetsbucket-1u41qdg42ur9/4797cab2-9ea2-4747-8d15-5ba064837c1c/postprocessed/experiment1_Record Node 102#Neuropix-PXI-100.ProbeA-AP_recording1/template_metrics/params.json')\n    S3Path('s3://codeocean-s3datasetsbucket-1u41qdg42ur9/4797cab2-9ea2-4747-8d15-5ba064837c1c/postprocessed/experiment1_Record Node 102#Neuropix-PXI-100.ProbeA-AP_recording1/template_metrics/params.json')\n    \"\"\"\n    if isinstance(pathlike, upath.UPath):\n        return pathlike\n    path: str = os.fsdecode(pathlike)\n    # UPath will do rsplit('#')[0] on path\n    if \"#\" in (p := pathlib.Path(path)).name:\n        return upath.UPath(path).with_name(p.name)\n    if \"#\" in p.parent.as_posix():\n        if p.parent.as_posix().count(\"#\") &gt; 1:\n            raise ValueError(\n                f\"Path {p} contains multiple '#' in a parent dirs, which we don't have a fix for yet\"\n            )\n        for parent in p.parents:\n            if \"#\" in parent.name:\n                # we can't create or join the problematic `#`, so we have to 'discover' it\n                new = upath.UPath(path).with_name(parent.name)\n                for part in p.relative_to(parent).parts:\n                    result = next(\n                        new.glob(part),\n                        None,\n                    )  # we can't create or join the problem-#, so we have to 'discover' it\n                    if result is None:\n                        raise FileNotFoundError(\n                            f\"In attempting to handle a path containing '#', we couldn't find {path}\"\n                        )\n                    new = result\n                return new\n    return upath.UPath(path)\n</code></pre>"},{"location":"reference/npc_io/file_io/#npc_io.file_io.move","title":"move","text":"<pre><code>move(src: PathLike, dest: PathLike, **rmtree_kwargs) -&gt; None\n</code></pre> <p>Copy <code>src</code> to <code>dest</code> with checksum validation, then delete <code>src</code>.</p> Source code in <code>npc_io/file_io.py</code> <pre><code>def move(src: PathLike, dest: PathLike, **rmtree_kwargs) -&gt; None:\n    \"\"\"Copy `src` to `dest` with checksum validation, then delete `src`.\"\"\"\n    src, dest = from_pathlike(src), from_pathlike(dest)\n    copy(src, dest)\n    if src.is_dir():\n        shutil.rmtree(src, **rmtree_kwargs)\n    else:\n        src.unlink()\n    logger.debug(f\"Deleted {src}\")\n</code></pre>"},{"location":"reference/npc_io/file_io/#npc_io.file_io.run_and_save_notebook","title":"run_and_save_notebook","text":"<pre><code>run_and_save_notebook(notebook_path: PathLike, save_path: PathLike, env: dict[str, Any] | None = None, format: Literal['markdown', 'notebook', 'script', 'html', 'pdf'] = 'notebook') -&gt; UPath\n</code></pre> <p>Use jupyter nbconvert to run a specific notebook file in a subprocess, saving the output to a new file.</p> <ul> <li>to pass parameters to the notebook, pass them here with the <code>env</code> dict, and load   them from the <code>os.environ</code> dict in the notebook</li> <li><code>format</code> can be specified - available options are here:   https://nbconvert.readthedocs.io/en/latest/usage.html#supported-output-formats</li> </ul> Source code in <code>npc_io/file_io.py</code> <pre><code>def run_and_save_notebook(\n    notebook_path: PathLike,\n    save_path: PathLike,\n    env: dict[str, Any] | None = None,\n    format: Literal[\"markdown\", \"notebook\", \"script\", \"html\", \"pdf\"] = \"notebook\",\n) -&gt; upath.UPath:\n    \"\"\"Use jupyter nbconvert to run a specific notebook file in a subprocess,\n    saving the output to a new file.\n\n    - to pass parameters to the notebook, pass them here with the `env` dict, and load\n      them from the `os.environ` dict in the notebook\n    - `format` can be specified - available options are here:\n      https://nbconvert.readthedocs.io/en/latest/usage.html#supported-output-formats\n    \"\"\"\n    notebook_path = from_pathlike(notebook_path)\n    assert (notebook_path).exists()\n    save_path = from_pathlike(save_path)\n    if save_path.is_dir():\n        save_path.mkdir(exist_ok=True, parents=True)\n        save_path = save_path / notebook_path.name\n\n    subprocess.run(  # pragma: no cover\n        f\"jupyter nbconvert --to {format} --execute --allow-errors --output {save_path.as_posix()}  {notebook_path.as_posix()}\",\n        check=True,\n        shell=True,\n        capture_output=False,\n        env=env,\n    )  # pragma: no cover\n    return save_path\n</code></pre>"},{"location":"reference/npc_io/file_io/#npc_io.file_io.size","title":"size","text":"<pre><code>size(path: PathLike) -&gt; int\n</code></pre> <p>Return the size of a file or directory in bytes</p> Source code in <code>npc_io/file_io.py</code> <pre><code>def size(path: PathLike) -&gt; int:\n    \"\"\"Return the size of a file or directory in bytes\"\"\"\n    path = from_pathlike(path)\n    return dir_size(path) if path.is_dir() else file_size(path)\n</code></pre>"},{"location":"reference/npc_io/file_io/#npc_io.file_io.size_gb","title":"size_gb","text":"<pre><code>size_gb(path: PathLike) -&gt; float\n</code></pre> <p>Return the size of a file or directory in GB</p> Source code in <code>npc_io/file_io.py</code> <pre><code>def size_gb(path: PathLike) -&gt; float:\n    \"\"\"Return the size of a file or directory in GB\"\"\"\n    return round(size(path) / 1024**3, 1)\n</code></pre>"},{"location":"reference/npc_io/file_io/#npc_io.file_io.symlink","title":"symlink","text":"<pre><code>symlink(src: PathLike, dest: PathLike) -&gt; None\n</code></pre> <p>Create symlink at <code>dest</code> pointing to file at <code>src</code>.</p> <ul> <li>creates symlinks recursively if <code>src</code> is a directory</li> <li>creates parent dirs if needed (as folders, not symlinks)</li> <li>skips if symlink already exists and points to <code>src</code></li> <li>replaces existing file or symlink pointing to a different location</li> </ul> Source code in <code>npc_io/file_io.py</code> <pre><code>def symlink(src: PathLike, dest: PathLike) -&gt; None:\n    \"\"\"Create symlink at `dest` pointing to file at `src`.\n\n    - creates symlinks recursively if `src` is a directory\n    - creates parent dirs if needed (as folders, not symlinks)\n    - skips if symlink already exists and points to `src`\n    - replaces existing file or symlink pointing to a different location\n    \"\"\"\n    src, dest = from_pathlike(src), from_pathlike(dest)\n    if src.is_dir():\n        for path in src.iterdir():\n            symlink(src, dest / path.name)\n    dest.parent.mkdir(parents=True, exist_ok=True)\n    if dest.is_symlink() and dest.resolve() == src.resolve():\n        logger.debug(f\"Symlink already exists to {src} from {dest}\")\n        return\n    with contextlib.suppress(FileNotFoundError):\n        dest.unlink()\n    with contextlib.suppress(FileExistsError):\n        dest.symlink_to(src)\n    logger.debug(f\"Created symlink to {src} from {dest}\")\n</code></pre>"},{"location":"coverage/","title":"Coverage","text":""}]}